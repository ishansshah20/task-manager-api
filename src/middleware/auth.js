const jwt = require('jsonwebtoken')
const User = require('../models/user')

const auth = async (req, res, next) => {
    try {
        const token = req.header('Authorization').replace('Bearer ', '')

        // 1st verification:
        // This just verifies that the token is generated by our site and if its not expired. But it can't verfiy if user has logged out (thus deleting the token)   
        const decoded = jwt.verify(token, process.env.JWT_SECRET)

        // 2nd verification: 
        // This is to check if the _id generated by the token is still in the database or not i.e. checking for unauthorized access. 
        // But it might happen that he is in database (i.e authorized) but has logged out thus deleting the token
        // So for a user to get an authorization to do something he has to be in database and also logged in to the system  
        const user = await User.findOne({ _id: decoded._id, 'tokens.token': token })

        if (!user) {
            throw new Error()
        }

        req.token = token
        req.user = user // Storing user in req so that request handler can later access it instead of finding it again in the database thus saving time
        next()

    } catch (e) {
        res.status(401).send({ error: 'Please authenticate!' })
    }
}

module.exports = auth